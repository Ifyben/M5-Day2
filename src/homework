## ********************* M5-D2 ****************************

## You are in charge of creating a set of WebAPIs for the Strive Blog application.

## Here you can find the Frontend already created

 

## In this first "step" the application should enable the creation, editing, deletion, listing of blog authors.

 

## Tomorrow you will connect to your backend from the frontend that we provided and communicate with your own API.

 

 

## Authors should have the following information:

 

## name
## surname
## ID (Unique and server-generated)
## email
## date of birth
## avatar (e.g. https://ui-avatars.com/api/?name=John+Doe)
 

## The backend should include the following routes:

 

## GET /authors => returns the list of authors
## GET /authors/123 => returns a single author
## POST /authors => create a new author
## PUT /authors/123 => edit the author with the given id
## DELETE /authors/123 => delete the author with the given id 


## ************************ M5-D3 *************************

## Strive Blog API
 

## You are in charge of creating a set of WebAPIs for the Strive Blog application.

## Here you can find the Frontend already created

 
## In this second "step" the application should enable the creation, editing, deletion, listing of blog posts


## Blog posts should contain the following information:

 
## {	
## "_id": "SERVER GENERATED ID",
## "category": "ARTICLE CATEGORY",
## "title": "ARTICLE TITLE",
## "cover":"ARTICLE COVER (IMAGE LINK)",
## "readTime": {
##  "value": 2,
##  "unit": "minute"
##  },
## "author": {
##     "name": "AUTHOR AVATAR NAME",
##     "avatar":"AUTHOR AVATAR LINK"
##     },
##  "content":"HTML",
##  "createdAt": "NEW DATE"
## }
 

## Backend
 

## The backend should include the following routes:

 

## GET /blogPosts => returns the list of blogposts
## GET /blogPosts /123 => returns a single blogpost
## POST /blogPosts => create a new blogpost
## PUT /blogPosts /123 => edit the blogpost with the given id
## DELETE /blogPosts /123 => delete the blogpost with the given id
 

## The persistence must be granted via file system (es.: Json file with a list of blog posts inside)

 

## Sidenote: remember to install the cors package with 'npm i cors', to import it and to use it with 'server.use(cors())'

 

## ⚠️ Bodies, params and queries must be validated

## ⚠️ Needed error handlers must be added (and properly used)

 

## Frontend
 

## Post article from new article form
## Fetch & List your articles at home page
 